// Admin Module (Phase 4)
// - Manage users (create/delete, set role)
// - Manage profiles (create/edit, assign owner, FP controls, lock, clear owned)
// - Import/Export data (users + profiles)

(function(){
  const USERS_KEY = 'divine_users_v1';
  const PROFILES_KEY = 'divine_profiles_v1';
  const $ = (s,r=document)=>r.querySelector(s);
  const t = (k,o)=> (window.I18N?.t?.(k,o)) || k;
  const rid = ()=> Math.random().toString(36).slice(2,10);

  function loadUsers(){ try{ const raw = localStorage.getItem(USERS_KEY); return raw? JSON.parse(raw): []; }catch(e){ return []; } }
  function saveUsers(v){ localStorage.setItem(USERS_KEY, JSON.stringify(v)); }

  function loadProfiles(){ try{ const raw = localStorage.getItem(PROFILES_KEY); return raw? JSON.parse(raw): {}; }catch(e){ return {}; } }
  function saveProfiles(v){ localStorage.setItem(PROFILES_KEY, JSON.stringify(v)); }

  function mount(){
    const sess = window.Core?.getSession?.(); if(!sess || sess.role!=='admin') return;
    const root = document.getElementById('viewRoot'); if(!root) return; root.innerHTML='';

    // show Admin nav button
    const goAdmin = document.getElementById('goAdmin'); if(goAdmin) goAdmin.classList.remove('hidden');

    const wrap = document.createElement('div');
    wrap.innerHTML = `
      <section class="panel">
        <h2>${t('admin_title')}</h2>
        <div class="row" style="gap:12px;flex-wrap:wrap">
          <button class="btn" id="btnExport">${t('export_data')}</button>
          <button class="btn" id="btnImport">${t('import_data')}</button>
        </div>
      </section>

      <section class="panel" id="usersSec" style="margin-top:10px">
        <h3>${t('users_title')}</h3>
        <div class="row" style="gap:12px;flex-wrap:wrap;margin-bottom:8px">
          <div class="field"><label>${t('username_lbl')}</label><input id="U_name" placeholder="player1"></div>
          <div class="field"><label>${t('password_lbl')}</label><input id="U_pass" type="password" placeholder="â€¢â€¢â€¢â€¢â€¢â€¢"></div>
          <div class="field"><label>${t('role_lbl')}</label>
            <select id="U_role"><option value="player">${t('player')}</option><option value="admin">${t('admin')}</option></select>
          </div>
          <button class="btn" id="U_add">${t('add_user')}</button>
        </div>
        <div id="usersList"></div>
      </section>

      <section class="panel" id="profilesSec" style="margin-top:10px">
        <h3>${t('profiles_title')}</h3>
        <div class="row" style="gap:12px;flex-wrap:wrap;margin-bottom:8px">
          <div class="field"><label>${t('owner_lbl')}</label><input id="P_owner" placeholder="username"></div>
          <div class="field"><label>${t('name')}</label><input id="P_name" placeholder="Character name"></div>
          <div class="field"><label>${t('class')}</label><input id="P_class" placeholder="Class"></div>
          <div class="field"><label>${t('level')}</label><input id="P_level" type="number" min="1" max="20" value="1"></div>
          <div class="field"><label>${t('god_lbl')}</label><input id="P_god" placeholder="Tyr/Bahamut"></div>
          <div class="field"><label>${t('align_lbl')}</label><input id="P_align" placeholder="Lawful Good"></div>
          <div class="field"><label>${t('fp_lbl')}</label><input id="P_fp" type="number" value="10"></div>
          <button class="btn" id="P_add">${t('add_profile')}</button>
        </div>
        <div id="profilesList"></div>
      </section>
    `;
    root.appendChild(wrap);

    const usersListEl = $('#usersList', wrap);
    const profilesListEl = $('#profilesList', wrap);

    function renderUsers(){
      const users = loadUsers();
      usersListEl.innerHTML = '';
      if(!users.length){ usersListEl.innerHTML = '<div style="opacity:.7">â€”</div>'; return; }
      users.forEach(u=>{
        const row = document.createElement('div'); row.className='panel'; row.style.margin='6px 0';
        row.innerHTML = `
          <div class="row" style="justify-content:space-between;gap:12px">
            <div>${u.username} <span style="opacity:.7">â€¢ ${u.role}</span></div>
            <div class="row">
              <select data-act="role">
                <option value="player" ${u.role==='player'?'selected':''}>${t('player')}</option>
                <option value="admin" ${u.role==='admin'?'selected':''}>${t('admin')}</option>
              </select>
              <button class="btn" data-act="del">${t('delete_user')}</button>
            </div>
          </div>`;
        row.querySelector('[data-act="role"]').addEventListener('change', (e)=>{ u.role = e.target.value; saveUsers(users); renderUsers(); });
        row.querySelector('[data-act="del"]').addEventListener('click', ()=>{ const next = loadUsers().filter(x=>x.username!==u.username); saveUsers(next); renderUsers(); });
        usersListEl.appendChild(row);
      });
    }

    function renderProfiles(){
      const profiles = loadProfiles();
      profilesListEl.innerHTML = '';
      const usernames = Object.keys(profiles);
      if(!usernames.length){ profilesListEl.innerHTML = '<div style="opacity:.7">â€”</div>'; return; }
      usernames.forEach(user=>{
        const p = profiles[user];
        const row = document.createElement('div'); row.className='panel'; row.style.margin='6px 0';
        row.innerHTML = `
          <div class="row" style="justify-content:space-between;gap:12px;align-items:flex-start">
            <div>
              <div style="font-weight:700">${p.name||user} <span style="opacity:.65">(${user})</span></div>
              <div style="opacity:.85;font-size:13px">${p.clazz||'â€”'} â€¢ Lv ${p.level||1} â€¢ ${p.god||'â€”'} â€¢ ${p.align||'â€”'}</div>
              <div style="opacity:.85;font-size:12px">FP: <b>${p.fp??0}</b> â€¢ Owned: <b>${(p.owned||[]).length}</b> ${p.lock? ' â€¢ ðŸ”’':''}</div>
            </div>
            <div class="row" style="gap:6px;flex-wrap:wrap">
              <button class="btn" data-act="fp-5">-5</button>
              <button class="btn" data-act="fp-1">-1</button>
              <button class="btn" data-act="fp+1">+1</button>
              <button class="btn" data-act="fp+5">+5</button>
              <div class="field" style="margin:0">
                <label>${t('set_fp')}</label>
                <input type="number" data-act="setFP" value="${p.fp??0}" style="width:100px">
              </div>
              <button class="btn" data-act="lock">${t('lock_toggle')}</button>
              <button class="btn" data-act="clear">${t('clear_owned')}</button>
              <button class="btn" data-act="del">${t('delete_user')}</button>
            </div>
          </div>
          <div class="row" style="gap:8px;flex-wrap:wrap;margin-top:8px">
            <div class="field"><label>${t('owner_lbl')}</label><input data-act="owner" value="${user}"></div>
            <div class="field"><label>${t('name')}</label><input data-act="name" value="${p.name||''}"></div>
            <div class="field"><label>${t('class')}</label><input data-act="clazz" value="${p.clazz||''}"></div>
            <div class="field"><label>${t('level')}</label><input type="number" min="1" max="20" data-act="level" value="${p.level||1}"></div>
            <div class="field"><label>${t('god_lbl')}</label><input data-act="god" value="${p.god||''}"></div>
            <div class="field"><label>${t('align_lbl')}</label><input data-act="align" value="${p.align||''}"></div>
          </div>
        `;
        // Buttons
        row.querySelector('[data-act="fp-5"]').addEventListener('click', ()=>{ p.fp=(p.fp??0)-5; saveProfiles(profiles); renderProfiles(); });
        row.querySelector('[data-act="fp-1"]').addEventListener('click', ()=>{ p.fp=(p.fp??0)-1; saveProfiles(profiles); renderProfiles(); });
        row.querySelector('[data-act="fp+1"]').addEventListener('click', ()=>{ p.fp=(p.fp??0)+1; saveProfiles(profiles); renderProfiles(); });
        row.querySelector('[data-act="fp+5"]').addEventListener('click', ()=>{ p.fp=(p.fp??0)+5; saveProfiles(profiles); renderProfiles(); });
        row.querySelector('[data-act="setFP"]').addEventListener('change', (e)=>{ p.fp=parseInt(e.target.value||p.fp||0,10); saveProfiles(profiles); renderProfiles(); });
        row.querySelector('[data-act="lock"]').addEventListener('click', ()=>{ p.lock = !p.lock; saveProfiles(profiles); renderProfiles(); });
        row.querySelector('[data-act="clear"]').addEventListener('click', ()=>{ p.owned=[]; saveProfiles(profiles); renderProfiles(); });
        row.querySelector('[data-act="del"]').addEventListener('click', ()=>{ delete profiles[user]; saveProfiles(profiles); renderProfiles(); });
        // Editable fields
        row.querySelectorAll('input[data-act]').forEach(inp=>{
          inp.addEventListener('change', ()=>{
            const act = inp.getAttribute('data-act');
            const val = inp.value;
            if(act==='owner'){
              // re-key map if changed
              if(val && val!==user){ profiles[val] = {...p}; delete profiles[user]; saveProfiles(profiles); renderProfiles(); }
            } else if (act==='level') { p[act] = parseInt(val||p.level||1,10); saveProfiles(profiles); }
            else { p[act] = val; saveProfiles(profiles); }
          });
        });

        profilesListEl.appendChild(row);
      });
    }

    // Handlers for Add
    $('#U_add', wrap).addEventListener('click', ()=>{
      const u = $('#U_name', wrap).value.trim();
      const p = $('#U_pass', wrap).value.trim();
      const r = $('#U_role', wrap).value;
      if(!u||!p) return alert(t('need_credentials'));
      const arr = loadUsers(); if(!arr.find(x=>x.username===u)) arr.push({id:rid(), username:u, password:p, role:r});
      saveUsers(arr); renderUsers();
    });

    $('#P_add', wrap).addEventListener('click', ()=>{
      const owner = $('#P_owner', wrap).value.trim();
      const name = $('#P_name', wrap).value.trim();
      if(!owner||!name) return alert('Owner & Name required');
      const profiles = loadProfiles();
      profiles[owner] = profiles[owner] || { id:rid(), owned:[], lock:false };
      Object.assign(profiles[owner], {
        name,
        clazz: $('#P_class', wrap).value.trim(),
        level: parseInt($('#P_level', wrap).value||'1',10),
        god: $('#P_god', wrap).value.trim(),
        align: $('#P_align', wrap).value.trim(),
        fp: parseInt($('#P_fp', wrap).value||'10',10)
      });
      saveProfiles(profiles); renderProfiles();
    });

    // Export / Import
    $('#btnExport', wrap).addEventListener('click', ()=>{
      const data = { users: loadUsers(), profiles: loadProfiles() };
      const blob = new Blob([JSON.stringify(data,null,2)], {type:'application/json'});
      const url = URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='divine-admin-export.json'; a.click(); URL.revokeObjectURL(url);
    });
    $('#btnImport', wrap).addEventListener('click', ()=>{
      const i = document.createElement('input'); i.type='file'; i.accept='.json'; i.onchange=()=>{
        const f = i.files[0]; if(!f) return; const fr=new FileReader(); fr.onload=()=>{
          try{ const data=JSON.parse(fr.result); if(data.users) saveUsers(data.users); if(data.profiles) saveProfiles(data.profiles); renderUsers(); renderProfiles(); }
          catch(e){ alert('Invalid JSON'); }
        }; fr.readAsText(f);
      }; i.click();
    });

    renderUsers();
    renderProfiles();
  }

  // Wire Admin nav button
  document.addEventListener('DOMContentLoaded', ()=>{
    const btn = document.getElementById('goAdmin');
    if(btn){ btn.addEventListener('click', mount); }
    // show button only for admins after login
    const sess = window.Core?.getSession?.();
    if(sess?.role==='admin' && btn){ btn.classList.remove('hidden'); }
  });

  window.Admin = { mount };
})();
